USE MASTER

DROP DATABASE IF EXISTS ventas;

CREATE DATABASE ventas;

use ventas;
/* set names utf8; */
--tabla de roles para usuarios
IF OBJECT_ID ('dbo.rol') IS NOT NULL  
   DROP TABLE rol;  
GO 

CREATE TABLE rol(
idrol            INTEGER NOT NULL PRIMARY KEY,
rol               VARCHAR(60) NOT NULL)

GO
---InsertANDo datos---
INSERT INTO rol(idrol,rol) VALUES
(1,'Administrador'),
(2,'Empleado'),(3,'SuperAdmin');

--tabla de usuarios
IF OBJECT_ID ('dbo.usuario') IS NOT NULL  
   DROP TABLE usuario;  
GO 
CREATE TABLE usuario
(
	idusuario          INTEGER IDENTITY(1000,1) PRIMARY KEY ,
	apellido             VARCHAR(60) NOT NULL,
	nombre               VARCHAR(60) NOT NULL,
	dni                  INTEGER NOT NULL UNIQUE,
	telefono             INTEGER NOT NULL,
    sexo				VARCHAR(20) NOT NULL,
	idrol                INTEGER NOT NULL,
	usuario              VARCHAR(20) NOT NULL UNIQUE,
	clave                VARCHAR(30) NOT NULL,
    fecha				DATETIME2(0) DEFAULT GETDATE(),
	estado               INTEGER NOT NULL,
	fotoUrl             VARCHAR(60) NOT NULL,

	CONSTRAINT FK_USUARIO_ROL FOREIGN KEY (idrol)REFERENCES ROL(idrol)) 
	GO
	
---proceso almacenado ---
IF OBJECT_ID ('dbo.InsertUsuario') IS NOT NULL  
   DROP PROCEDURE InsertUsuario;  
GO 
CREATE PROCEDURE InsertUsuario (
	@u_apellido             VARCHAR(60),
	@u_nombre               VARCHAR(60),
	@u_dni                  INTEGER,
	@u_telefono             INTEGER,
    @u_sexo				VARCHAR(20),
	@u_idrol                INTEGER ,
	@u_usuario              VARCHAR(20),
	@u_clave                VARCHAR(60),
	@u_estado               INTEGER,
	@u_fotoUrl             VARCHAR(60))
    as
    begin
    INSERT INTO USUARIO(apellido,nombre,       
dni,telefono,sexo,idrol,usuario,clave,estado,fotoUrl) VALUES(@u_apellido,@u_nombre,       
@u_dni,@u_telefono,@u_sexo,@u_idrol,@u_usuario,@u_clave,@u_estado,@u_fotoUrl);
END;
GO
---InsertANDo datos---
exec InsertUsuario 'Aguila Ruiz','Bengy Jammil',71488520,946522258,'Hombre',3,'BJAR','BJAR',1,'bengy.png'
exec InsertUsuario 'Vicente Rosas ','Noe pisado',71488555,946522259,'Hombre',1,'NOE','NOE',1,'user-prueba.png'
exec InsertUsuario 'Juan Carlos','Medina Dias',71488660,946522259,'Hombre',2,'Juan','Juan',1,'user-prueba.png'

/*

SELECT * FROM USUARIO WHERE USUARIO LIKE 'b%'
----WHERE (producto LIKE '" + buscar + "%' or  idinventario LIKE'" + buscar + "%')";

SELECT u.idusuario,u.apellido,u.nombre, u.dni,u.telefono,u.sexo ,r.rol,u.usuario,u.clave,convert(DATE,u.fecha)fecha,
CASE WHEN u.estado = '1' THEN 'Activo' ELSE 'Desactivo' END as estado
FROM usuario u  INNER JOIN ROL r on u.idrol = r.idrol
WHERE (u.dni LIKE '%') AND (u.apellido LIKE 'a%')
order by u.idusuario
SELECT MAX(idboleta)total FROM boleta
vSELECT MAX(idboleta)totalb FROM boleta
go
---REPORTE---
SELECT u.idusuario,u.apellido,u.nombre, u.dni,u.telefono,u.sexo ,r.rol,u.usuario,u.clave,convert(DATE,u.fecha)fecha
,CONVERT(VARCHAR, u.fecha, 108)HORA,u.fotoUrl,
CASE WHEN u.estado = '1' THEN 'Activo' ELSE 'Desactivo' END as estado
FROM usuario u  INNER JOIN ROL r on u.idrol = r.idrol
WHERE u.idusuario = 1000
GO
*/
GO

---creANDo proceso almacenado----------
CREATE PROCEDURE ListarUser (
	@buscar VARCHAR(60))
	
	as
    begin
	SELECT u.idusuario,u.apellido,u.nombre, u.dni,u.telefono,u.sexo ,r.rol,u.usuario,u.clave,convert(DATE,u.fecha)fecha,u.fotoUrl,
CASE WHEN u.estado = '1' THEN 'Activo' ELSE 'Desactivo' END AS estado
FROM usuario u  INNER JOIN ROL r on u.idrol = r.idrol
WHERE (u.dni LIKE @buscar+'%' or u.apellido LIKE @buscar + '%')
order by u.idusuario
END;
GO

select*from usuario
---creANDo proceso almacenado--------

IF OBJECT_ID ('dbo.actualizarUsuario') IS NOT NULL  
   DROP PROCEDURE actualizarUsuario;  
GO 

CREATE PROCEDURE actualizarUsuario (
    @u_idusuario			  INTEGER,
    @u_apellido             VARCHAR(60),
	@u_nombre               VARCHAR(60),
	@u_dni                  INTEGER,
	@u_telefono             INTEGER,
	@u_sexo             VARCHAR(20),
	@u_idrol                INTEGER ,
	@u_usuario              VARCHAR(20),
	@u_clave                VARCHAR(60),
	@u_estado               INTEGER,
	@u_fotoUrl             VARCHAR(60))
AS
begin

update USUARIO set   apellido=@u_apellido,
                       nombre = @u_nombre ,
					   dni = @u_dni,
					   telefono = @u_telefono,
					   sexo = @u_sexo,
					   idrol = @u_idrol,
					   usuario = @u_usuario,
					   clave = @u_clave,
					   estado = @u_estado,
					   fotoUrl =@u_fotoUrl
WHERE idusuario=@u_idusuario;
END;
GO


---creANDo proceso almacenado------
 
 
IF OBJECT_ID ('dbo.eliminarUsuario') IS NOT NULL  
   DROP PROCEDURE eliminarUsuario;  
GO 


CREATE PROCEDURE eliminarUsuario
(
 @p_idusuario INT
)
AS
begin
delete  FROM USUARIO 
 WHERE idusuario=@p_idusuario;

END;
GO



---creANDo tabla categoria------


CREATE table categoria (
idCategoria			 INTEGER IDENTITY(1000,1) PRIMARY KEY,
categoria			varchar (20)UNIQUE NOT  NULL,          
descripcion		      varchar(250),
fecha				DATETIME2(0) DEFAULT GETDATE());
go

---creANDo proceso almacenado----------
IF OBJECT_ID ('dbo.InsertCategoria') IS NOT NULL  
   DROP PROCEDURE InsertCategoria;  
GO 
CREATE PROCEDURE InsertCategoria(
	@c_categoria varchar(20),
    @c_descripcion varchar (250))
    AS
    begin
    INSERT INTO categoria(categoria,descripcion) VALUES(@c_categoria,@c_descripcion);
END;
GO

---InsertANDo Datos----------

exec InsertCategoria 'Carnes y embutidos','carnes y embutidos de todo tipo '
exec InsertCategoria 'Frutas','frutas de todo tipo - venta por kilo'
exec InsertCategoria 'galleta','todo tipo de galletas de sal y dulce'
exec InsertCategoria 'Conservas','conservas de pescado'
exec InsertCategoria 'Bebidas','bebidas de todo tipo'
exec InsertCategoria 'Limpieza','instrumentos y cosas de limpiza'

go

---creANDo proceso almacenado----------

IF OBJECT_ID ('dbo.actualizarCategoria') IS NOT NULL  
   DROP PROCEDURE actualizarCategoria;  
GO 

CREATE PROCEDURE actualizarCategoria (
    @c_idCategoria int,
   @c_categoria varchar(20),
    @c_descripcion varchar (250))
AS
begin
update categoria set   categoria=@c_categoria,
					   descripcion =@c_descripcion
WHERE idCategoria=@c_idCategoria;
END;
GO


---creANDo proceso almacenado----------
 go
 
IF OBJECT_ID ('dbo.eliminarCategoria') IS NOT NULL  
   DROP PROCEDURE eliminarCategoria;  
GO 


CREATE PROCEDURE eliminarCategoria
(
 @p_idcategoria INT
)
AS
begin

delete  FROM categoria 
 WHERE idCategoria=@p_idcategoria;

END;
GO

---creANDo proceso almacenado----------
IF OBJECT_ID ('dbo.listCat') IS NOT NULL  
   DROP PROCEDURE listCat;  
GO

CREATE PROCEDURE listCat(
@c_nombre varchar(10)
)
AS 
begin
SELECT idCategoria, categoria, descripcion, convert(DATE,fecha)Fecha FROM categoria
WHERE categoria LIKE @c_nombre+'%'
order by idCategoria
END;
GO

---creANDo tabla----------

-------------------------------
IF OBJECT_ID ('dbo.unidadMedida') IS NOT NULL  
   DROP TABLE unidadMedida;  
GO 
CREATE TABLE unidadMedida(
idUnidadMedida      INTEGER IDENTITY(1000,1) PRIMARY KEY,
unidad				varchar(20) NOT NULL,
abreviatura			varchar(4) NOT NULL ,
descripcion			varchar (250),
fecha		DATETIME2(0) DEFAULT GETDATE());




IF OBJECT_ID ('dbo.InsertunidadMedida') IS NOT NULL  
   DROP PROCEDURE InsertunidadMedida;  
GO 
 
 ---creANDo proceso almacenado----------

CREATE PROCEDURE InsertunidadMedida(
	@u_unidad varchar(20),
	@U_abreviatura VARCHAR(4),
    @u_descripcion varchar (250))
    AS
    begin
	if(@u_descripcion ='')
    INSERT INTO unidadMedida(unidad,abreviatura,descripcion) VALUES(@u_unidad,@U_abreviatura,NULL);
	ELSE
	 INSERT INTO unidadMedida(unidad,abreviatura,descripcion) VALUES(@u_unidad,@U_abreviatura,@u_descripcion);
END;
GO

---Insert Datos----------

exec InsertunidadMedida 'kilogramo','Kg',NULL
exec InsertunidadMedida 'Litro','L',NULL
exec InsertunidadMedida 'Paquete','Pq',NULL
exec InsertunidadMedida 'Unidad','Ud',NULL
exec InsertunidadMedida 'Gramo','Gr',NULL

---creANDo proceso almacenado----------
IF OBJECT_ID ('dbo.actualizarunidadMedida') IS NOT NULL  
   DROP PROCEDURE actualizarunidadMedida;  
GO 

CREATE PROCEDURE actualizarunidadMedida (
@u_idUnidadMedida Integer,
  @u_unidad varchar(20),
  	@u_abreviatura VARCHAR(4),
    @u_descripcion varchar (250))
as
begin
update unidadMedida set   unidad=@u_unidad,
							abreviatura=@u_abreviatura,
					   descripcion =@u_descripcion
WHERE idUnidadMedida=@u_idUnidadMedida;
END;
GO
 
 ---creANDo proceso almacenado----------
 
IF OBJECT_ID ('dbo.eliminarunidadMedida') IS NOT NULL  
   DROP PROCEDURE eliminarunidadMedida;  
GO 


CREATE PROCEDURE eliminarunidadMedida
(
 @u_unidadMedida INT
)
as
begin
delete  FROM unidadMedida 
 WHERE idUnidadMedida=@u_unidadMedida;

END;
GO

---creANDo proceso almacenado----------

IF OBJECT_ID ('dbo.listUnidadMedida') IS NOT NULL  
   DROP TABLE listUnidadMedida;  
GO 
CREATE PROCEDURE listUnidadMedida(
@c_nombre varchar(10)
)
as 
begin
SELECT  idUnidadMedida, unidad,abreviatura , descripcion , convert(date,fecha)fecha FROM unidadMedida
WHERE unidad LIKE @c_nombre+'%'
order by idUnidadMedida
END;

GO


---creANDo vista ----------

CREATE VIEW listUnidadMedi as
SELECT  idUnidadMedida, unidad,abreviatura , descripcion , convert(date,fecha)fecha FROM unidadMedida
------------------------------
GO

IF OBJECT_ID ('dbo.inventario') IS NOT NULL  
   DROP TABLE inventario;  
GO 


---creANDo table ----------

CREATE table inventario(
idinventario integer PRIMARY KEY IDENTITY(1000,1),
producto varchar(20) UNIQUE,
idCategoria int,
idUnidadMedida int,
preciocompra float NOT NULL,
precioventa float NOT NULL,
stock float NOT NULL,
fecha		DATETIME2(0) DEFAULT GETDATE(),
fechaVencimiento date
CONSTRAINT FK_INVENTARIO_CATE FOREIGN KEY (idCategoria)REFERENCES categoria(idCategoria),
CONSTRAINT FK_INVENTARIO_IN FOREIGN KEY (idUnidadMedida)REFERENCES unidadMedida(idUnidadMedida)) 

---creANDo proceso almacenado----------

go
IF OBJECT_ID ('dbo.Insertinventario') IS NOT NULL  
   DROP PROCEDURE Insertinventario;  
GO 


CREATE PROCEDURE Insertinventario(
	@i_producto varchar(20),
    @i_idCategoria varchar(20),
	@i_idUnidadMedida varchar(20),
	@i_preciocompra float,
	@i_precioventa float,
	@i_stock float,
	@fechaVencimiento date)
    as
    begin
	if(@fechaVencimiento='')

    INSERT INTO inventario(producto,idCategoria,idUnidadMedida,     
preciocompra,precioventa,stock,fechaVencimiento) 
VALUES(@i_producto,(SELECT idCategoria FROM categoria WHERE categoria =@i_idCategoria),
(SELECT idUnidadMedida FROM unidadMedida WHERE unidad = @i_idUnidadMedida),@i_preciocompra,@i_precioventa,@i_stock,NULL)
ELSE
  INSERT INTO inventario(producto,idCategoria,idUnidadMedida,     
preciocompra,precioventa,stock,fechaVencimiento) 
VALUES(@i_producto,(SELECT idCategoria FROM categoria WHERE categoria =@i_idCategoria)
,(SELECT idUnidadMedida FROM unidadMedida WHERE unidad = @i_idUnidadMedida),@i_preciocompra,@i_precioventa,@i_stock,@fechaVencimiento)
END;
 
 GO

 ---Insert Dato----------

exec Insertinventario 'hbg de pollo','Carnes y embutidos','Paquete','2','3.5','100','2019-11-20'
exec Insertinventario 'hbg de carne','Carnes y embutidos','Paquete','2','3.5','100','2019-05-20'
exec Insertinventario 'naranjas','Frutas','kilogramo','05','1.5','100',''
exec Insertinventario 'atun','Conservas','Unidad','3','5','100','2020-05-20'
exec Insertinventario 'galleta soda','galleta','Unidad','0.2','0.5','100','2020-05-20'
exec Insertinventario 'gs inka cola 1l','Bebidas','Unidad','2','5','100','2020-05-20'
exec Insertinventario 'gs coca cola 1l','Bebidas','Unidad','2','5','100','2019-07-20'
exec Insertinventario 'gs fanta','Bebidas','Unidad','2','5','100','2019-07-1'
exec Insertinventario 'rc de basura','Limpieza','Unidad','6','12','100',''
exec Insertinventario 'escoba','Limpieza','Unidad','6','12','0',''
exec Insertinventario 'prf H Manzana','Limpieza','Unidad','6','12','200',''
go

---creANDo proceso almacenado----------

IF OBJECT_ID ('dbo.actualizarinventario') IS NOT NULL  
   DROP PROCEDURE actualizarinventario;  
GO 

CREATE PROCEDURE actualizarinventario (
	@i_idinventario integer,
	@i_producto varchar(20),
    @i_idCategoria varchar(20),
	@i_idUnidadMedida varchar(20),
	@i_preciocompra float,
	@i_precioventa float,
	@i_stock float,
	@fechaVencimiento date)
as
begin
if(@fechaVencimiento ='')
update inventario set   producto=@i_producto,
						idCategoria=(SELECT idCategoria FROM categoria WHERE categoria =@i_idCategoria),
						idUnidadMedida=(SELECT idUnidadMedida FROM unidadMedida WHERE unidad =@i_idUnidadMedida),
                        preciocompra=@i_preciocompra,
                        precioventa=@i_precioventa,
                        stock=@i_stock,
					   fechaVencimiento =NULL
WHERE idinventario=@i_idinventario;
ELSE
update inventario set   producto=@i_producto,
						idCategoria=(SELECT idCategoria FROM categoria WHERE categoria =@i_idCategoria),
						idUnidadMedida=(SELECT idUnidadMedida FROM unidadMedida WHERE unidad =@i_idUnidadMedida),
                        preciocompra=@i_preciocompra,
                        precioventa=@i_precioventa,
                        stock=@i_stock,
					   fechaVencimiento =@fechaVencimiento
WHERE idinventario=@i_idinventario;
END;
GO


---creANDo proceso almacenado----------

IF OBJECT_ID ('dbo.eliminarinventario') IS NOT NULL  
   DROP PROCEDURE eliminarinventario;  
GO 

CREATE PROCEDURE eliminarinventario
(@i_idinventario INT)
as
begin
delete  FROM inventario 
 WHERE idinventario=@i_idinventario;

END;
GO

---creANDo vista----------
GO
CREATE VIEW listaInventario 
as
SELECT i.idinventario, i.producto,c.categoria,u.unidad, i.preciocompra, i.precioventa, i.stock , i.fechaVencimiento,
case
 when ((DATEADD(MONTH,-1,i.fechaVencimiento) < i.fechaVencimiento) AND (i.fechaVencimiento <= GETDATE())) THEN 'vencido' 

 when ((getdate()<i.fechaVencimiento) AND(i.fechaVencimiento >DATEADD(MONTH,+1,GETDATE())))  THEN 'estable'
 when ((DATEADD(MONTH,-1,i.fechaVencimiento) <= i.fechaVencimiento) AND(i.fechaVencimiento > GETDATE()))THEN 'por vencer'
	
ELSE 'sin fecha'
 END AS vencimiento
 FROM inventario i
INNER JOIN categoria c on i.idCategoria=c.idCategoria
INNER JOIN unidadMedida u on i.idUnidadMedida=u.idUnidadMedida

go


---creANDo vista----------

CREATE VIEW listarProductos
as
SELECT i.idinventario, i.producto,u.abreviatura,c.categoria,i.precioventa, i.stock , i.fechaVencimiento,
case
 when ((DATEADD(MONTH,-1,i.fechaVencimiento) < i.fechaVencimiento) AND (i.fechaVencimiento <= GETDATE())) THEN 'vencido' 

 when ((getdate()<i.fechaVencimiento) AND(i.fechaVencimiento >DATEADD(MONTH,+1,GETDATE())))  THEN 'estable'
 when ((DATEADD(MONTH,-1,i.fechaVencimiento) <= i.fechaVencimiento) AND(i.fechaVencimiento > GETDATE()))THEN 'por vencer'
	
ELSE 'sin fecha'
 END AS vencimiento
 FROM inventario i
INNER JOIN categoria c on i.idCategoria=c.idCategoria
INNER JOIN unidadMedida u on i.idUnidadMedida=u.idUnidadMedida

go

---creANDo proceso almacenado----------

CREATE PROCEDURE buscarInventario(@i_buscar varchar(20))
as 
begin
SELECT i.idinventario, i.producto,c.categoria,u.unidad, i.preciocompra, i.precioventa, i.stock , i.fechaVencimiento,
case
 when ((DATEADD(MONTH,-1,i.fechaVencimiento) < i.fechaVencimiento) AND (i.fechaVencimiento <= GETDATE())) THEN 'vencido' 

 when ((getdate()<i.fechaVencimiento) AND(i.fechaVencimiento >DATEADD(MONTH,+1,GETDATE())))  THEN 'estable'
 when ((DATEADD(MONTH,-1,i.fechaVencimiento) <= i.fechaVencimiento) AND(i.fechaVencimiento > GETDATE()))THEN 'por vencer'
	
ELSE 'sin fecha'
 END AS vencimiento
 FROM inventario i
INNER JOIN categoria c on i.idCategoria=c.idCategoria
INNER JOIN unidadMedida u on i.idUnidadMedida=u.idUnidadMedida
WHERE i.producto LIKE @i_buscar+'%'
END
go

---creANDo proceso almacenado----------

/*Creamos unan proceso de filtros, en este caso
mostrara todos los productos que no esten vencidos
y que tengan stock*/
IF OBJECT_ID ('dbo.buscarProducto') IS NOT NULL  
   DROP TABLE buscarProducto;  
GO 
CREATE PROCEDURE buscarProducto(@i_categoria varchar(20),@i_buscar varchar(20))
as 
begin
if(@i_categoria='')
SELECT * FROM listarProductos
WHERE vencimiento <> 'vencido' AND stock > 0 AND producto LIKE + @i_buscar+ '%'
ELSE
SELECT * FROM listarProductos
WHERE vencimiento <> 'vencido' AND stock > 0 AND producto LIKE + @i_buscar+ '%' AND categoria=@i_categoria
END
go

SELECT stock FROM inventario
WHERE producto = 'hamburguesa de pollo'

---creANDo tabla Cliente----------
IF OBJECT_ID ('dbo.cliente') IS NOT NULL  
   DROP TABLE cliente;  
GO

CREATE TABLE cliente(
idCliente INTEGER identity(1000,1) PRIMARY KEY,
numeroRuc VARCHAR(20),
nombreComercial VARCHAR(200),
direcDomiFis VARCHAR(400),
telefono VARCHAR(20),
fecha  DATETIME2(0) DEFAULT GETDATE())

---creANDo proceso alamacenado Cliente----------
IF OBJECT_ID ('dbo.registrarCliente') IS NOT NULL  
   DROP PROCEDURE registrarCliente;  
GO

CREATE PROCEDURE registrarCliente
(@c_numeroRuc varchar(20),@c_nombreComercial varchar(200), @c_direcDomiFis varchar(400),@c_telefono varchar(20))
AS
BEGIN
INSERT INTO cliente(numeroRuc,nombreComercial,direcDomiFis,telefono)
VALUES(@c_numeroRuc,@c_nombreComercial,@c_direcDomiFis,@c_telefono)
END
GO

EXEC  registrarCliente '20100047218',
'BANCO DE CREDITO DEL PERU','CAL.CENTENARIO NRO. 156 URB. LAS LADERAS DE MELGAREJO LIMA - LIMA - LA MOLINA','(01)311-9898'
EXEC  registrarCliente '20100047220',
'BANCO DE CREDITO DEL PERU','CAL.CENTENARIO NRO. 156 URB. LAS LADERAS DE MELGAREJO LIMA - LIMA - LA MOLINA','(01)311-9898'
GO
---creANDo proceso alamacenado Cliente----------
IF OBJECT_ID ('dbo.eliminarCliente') IS NOT NULL  
   DROP PROCEDURE eliminarCliente;  
GO

CREATE PROCEDURE eliminarCliente
(@c_idCliente integer)
AS
BEGIN
delete FROM cliente
WHERE idCliente = @c_idCliente
END
GO

---creANDo proceso alamacenado Cliente----------
IF OBJECT_ID ('dbo.actualizarCliente') IS NOT NULL  
   DROP PROCEDURE actualizarCliente;  
GO

CREATE PROCEDURE actualizarCliente
(@c_idCliente integer,@c_numeroRuc varchar(20),@c_nombreComercial varchar(200), @c_direcDomiFis varchar(400),@c_telefono varchar(20))
AS
BEGIN
update  cliente set numeroRuc = @c_numeroRuc,
					nombreComercial =@c_nombreComercial,
					direcDomiFis=@c_direcDomiFis,
					telefono = @c_telefono
WHERE idCliente = @c_idCliente
END
GO
----Listar CLIENTE----
IF OBJECT_ID ('dbo.listarCliente') IS NOT NULL  
   DROP PROCEDURE listarCliente;  
GO
CREATE PROCEDURE listarCliente(@lc_buscar varchar(20))
AS 
BEGIN
if(@lc_buscar = '')
select idCliente,numeroRuc,nombreComercial,direcDomiFis,telefono,convert(date,fecha)fecha from cliente
else
select idCliente,numeroRuc,nombreComercial,direcDomiFis,telefono,convert(date,fecha)fecha from cliente
where numeroRuc like @lc_buscar+'%' or nombreComercial like @lc_buscar+'%'
END
GO
exec listarCliente ''
select * from cliente
---FACTURA---
select * from cliente
IF OBJECT_ID ('dbo.factura') IS NOT NULL  
   DROP TABLE factura;  
GO
CREATE TABLE factura (
  idFactura INTEGER PRIMARY KEY,
  idusuario INTEGER,
  idCliente INTEGER,
  subtotal FLOAT,
  igv FLOAT,
  total FLOAT,
  fecha_factura DATETIME2(0) DEFAULT GETDATE()
  CONSTRAINT FK_FACTURA_IDU FOREIGN KEY (idusuario)REFERENCES usuario(idusuario),
  CONSTRAINT FK_FACTURA_IDCLI FOREIGN KEY (idCliente)REFERENCES cliente(idCliente))
GO

-----DETALLE FACTURA ----------
IF OBJECT_ID ('dbo.detalle_factura') IS NOT NULL  
   DROP TABLE detalle_factura;  
GO

CREATE TABLE detalle_factura(
iddetalle_factura int PRIMARY KEY identity(1000,1),
idFactura INTEGER,
idinventario INTEGER,
cantidad FLOAT,
CONSTRAINT FK_DETALLE_FACTURA_IDF FOREIGN KEY (idFactura)REFERENCES factura(idFactura),
CONSTRAINT FK_DETALLE_FACTURA__IDI FOREIGN KEY (idinventario)REFERENCES inventario(idinventario))
GO
-------PROCESO ALMACENADO-----
IF OBJECT_ID('dbo.insertFactura') IS NOT NULL
DROP PROCEDURE insertFactura
GO

CREATE PROCEDURE insertFactura
(@f_idFactura int, @f_idUser int, @f_idCliente varchar(200),
@f_subtotal float,@f_igv float,@f_total float)
AS 
BEGIN
INSERT INTO factura(idFactura,idusuario,idCliente,subtotal,igv,total)
VALUES(@f_idFactura,@f_idUser,
(select idCliente from cliente where nombreComercial +'-' + numeroRuc=@f_idCliente or numeroRuc + '-'+nombreComercial =  @f_idCliente),
@f_subtotal,@f_igv,@f_total) 
END
GO
-----select idCliente from cliente where nombreComercial +'-' + numeroRuc='BANCO DE CREDITO DEL PERU-20100047220'
exec insertFactura 11,1000,'BANCO DE CREDITO DEL PERU-20100047220',82,18,100
----PROCESO ALMACENADO ----
select * from factura
IF OBJECT_ID ('dbo.insertDetalleFactura') IS NOT NULL  
   DROP PROCEDURE insertDetalleFactura;  
GO

CREATE PROCEDURE insertDetalleFactura(@df_idFactura int ,@df_idinventario int, @df_cantidad float)
AS
BEGIN
INSERT INTO detalle_factura(idFactura, idinventario,cantidad)
VALUES(@df_idFactura,@df_idinventario,@df_cantidad)
UPDATE inventario SET stock = stock - @df_cantidad WHERE idinventario = @df_idinventario
END
GO
---CONSULTA----
/*
select f.idFactura, c.nombreComercial, c.numeroRuc, c.direcDomiFis, c.telefono,u.nombre+ ' '+ u.apellido as UserAtendio,
convert(date,f.fecha_factura)Fecha,convert(time(0),f.fecha_factura)hora, i.producto, df.cantidad, i.precioventa, (df.cantidad*i.precioventa)totalProduc,
f.subtotal, f.igv,f.total
  from factura f
inner join usuario u on f.idusuario=u.idusuario
inner join detalle_factura df on f.idFactura=df.idFactura
inner join inventario i on df.idinventario=i.idinventario
inner join cliente c on f.idCliente= c.idCliente
where f.idFactura=8*/
/*
select b.idboleta,b.nombre_cliente, i.producto, db.cantidad,i.precioventa,u.apellido +' ' + u.nombre as vendedor,
(db.cantidad*i.precioventa)TotalXPro,
 b.subtotal, b.igv,b.total,convert(date,b.fecha_Venta)Fecha,convert(time(0),b.fecha_Venta)hora 
 from boleta b
inner join usuario u on b.idusuario=u.idusuario
inner join detalle_boleta db on b.idboleta=db.idboleta
inner join inventario i on db.idinventario=i.idinventario
where  b.idboleta = $P{idVentas}*/

-------FIN FACTURA-------
-------INICIO BOLETA-----
---CREANDO TABLA BOLETA----------

IF OBJECT_ID ('dbo.boleta') IS NOT NULL  
   DROP TABLE boleta;  
GO
CREATE TABLE boleta (
  idboleta INT PRIMARY KEY,
  idusuario INT NOT NULL,
  nombre_cliente VARCHAR(100),
  subtotal FLOAT,
  igv FLOAT,
  total FLOAT,
  fecha_Venta DATETIME2(0) DEFAULT GETDATE()
  CONSTRAINT FK_VENTAS_ID FOREIGN KEY (idusuario)REFERENCES usuario(idusuario)
)
go
----CREANDO DETALLE BOLETA----

IF OBJECT_ID ('dbo.detalle_boleta') IS NOT NULL  
   DROP TABLE detalle_boleta;  
GO

CREATE TABLE detalle_boleta(
iddetalle_boleta int primary key identity(1000,1),
idboleta INT,
idinventario INT,
cantidad FLOAT,
CONSTRAINT FK_DETALLE_BOLETA_IDB FOREIGN KEY (idboleta)REFERENCES boleta(idboleta),
CONSTRAINT FK_DETALLE_BOLETA_IDI FOREIGN KEY (idinventario)REFERENCES inventario(idinventario))
GO

--SELECT MAX(idventas)numeromax FROM ventas;

---PROCESO ALMACENADO BOLETA----------

IF OBJECT_ID ('dbo.insertBoleta') IS NOT NULL  
   DROP PROCEDURE insertBoleta;  
GO

CREATE PROCEDURE insertBoleta(@v_idboleta int, @v_idUser int, @v_Ncliente varchar(100),
@v_subtotal float,@v_igv float,@v_total float)
AS
BEGIN
if(@v_Ncliente='')

INSERT INTO boleta(idboleta,idusuario,nombre_cliente,subtotal,igv,total)
VALUES(@v_idboleta,@v_idUser,NULL,@v_subtotal,@v_igv,@v_total)

ELSE
INSERT INTO boleta(idboleta,idusuario,nombre_cliente,subtotal,igv,total)
VALUES(@v_idboleta,@v_idUser,@v_Ncliente,@v_subtotal,@v_igv,@v_total)
END;
GO

---PROCESO ALMACENADO----
IF OBJECT_ID ('dbo.insertDetalleBoleta') IS NOT NULL  
   DROP PROCEDURE insertDetalleBoleta;  
GO

CREATE PROCEDURE insertDetalleBoleta(@v_idboleta int ,@db_idinventario int, @db_cantidad float)
AS
BEGIN

INSERT INTO detalle_boleta(idboleta, idinventario,cantidad)
VALUES(@v_idboleta,@db_idinventario,@db_cantidad)
UPDATE inventario SET stock = stock - @db_cantidad WHERE idinventario = @db_idinventario
END
GO
---Insert Datos ----------

select b.idboleta,b.nombre_cliente, i.producto, db.cantidad,i.precioventa,u.apellido +' ' + u.nombre as vendedor,
(db.cantidad*i.precioventa)TotalXPro,
 b.subtotal, b.igv,b.total,convert(date,b.fecha_Venta)Fecha,convert(time(0),b.fecha_Venta)hora 
 from boleta b
inner join usuario u on b.idusuario=u.idusuario
inner join detalle_boleta db on b.idboleta=db.idboleta
inner join inventario i on db.idinventario=i.idinventario
where  b.idboleta = 2
select * from boleta

-----REPORTES----



-----exec insertVenta 00001,1000,'sebastian  Rojas',5.74,1.26,7


-----exec insertVenta 00002,1000,'',2.46,0.54,3

 /*
GO

---creANDo tabla ----------
IF OBJECT_ID ('dbo.detalle_venta') IS NOT NULL  
   DROP TABLE detalle_venta;  
GO

CREATE TABLE detalle_venta(
iddetalle_venta int PRIMARY KEY identity(1000,1),
idventas int,
idinventario int,
cantidad float,
CONSTRAINT FK_DETALLE_VENTA_IDV FOREIGN KEY (idventas)REFERENCES ventas(idventas),
CONSTRAINT FK_DETALLE_VENTA_IDI FOREIGN KEY (idinventario)REFERENCES inventario(idinventario))
GO

---creANDo proceso almacenado----------

IF OBJECT_ID ('dbo.insertDetalleVenta') IS NOT NULL  
   DROP PROCEDURE insertDetalleVenta;  
GO

CREATE PROCEDURE insertDetalleVenta(@dv_idventas int ,@dv_idinventario int, @dv_cantidad float)
AS
BEGIN

INSERT INTO detalle_venta(idventas, idinventario,cantidad)
VALUES(@dv_idventas,@dv_idinventario,@dv_cantidad)
UPDATE inventario SET stock = stock - @dv_cantidad WHERE idinventario = @dv_idinventario
END
GO

----SELECT * FROM inventario
GO
---EXEC insertDetalleVenta 1,1000,2
---EXEC insertDetalleVenta 1,1001,2
---SELECT * FROM ventas
----SELECT * FROM detalle_venta
-----SELECT * FROM inventario
----------------------------------------
/*go
IF OBJECT_ID ('dbo.gastos') IS NOT NULL  
   DROP TABLE gastos;  
GO

CREATE table gastos(
idgastos      INTEGER IDENTITY(1000,1) PRIMARY KEY,
monto				float,
descripcion			varchar (250),
fecha DATETIME2(0) DEFAULT GETDATE());



IF OBJECT_ID ('dbo.Insertgastos') IS NOT NULL  
   DROP PROCEDURE Insertgastos;  
GO

CREATE PROCEDURE Insertgastos(
	@g_monto float,
    @g_descripcion varchar (250))
    as
    begin
    set nocount on;
    INSERT INTO gastos(monto,descripcion) VALUES(@g_monto,@g_descripcion);
END;
GO


exec Insertgastos 1000,'soy un kilogramo'



IF OBJECT_ID ('dbo.actualizargastos') IS NOT NULL  
   DROP PROCEDURE actualizargastos;  
GO

CREATE PROCEDURE actualizargastos (
@g_idgastos Integer,
 @g_monto float,
    @g_descripcion varchar (250))
as
begin
set nocount on; 
update gastos set   monto=@g_monto,
					   descripcion =@g_descripcion
WHERE idgastos=@g_idgastos;
END;
GO

exec actualizargastos 1000,2000,'soy un kiligramito'
 
 GO 

IF OBJECT_ID ('dbo.eliminargastos') IS NOT NULL  
   DROP PROCEDURE eliminargastos;  
GO

CREATE PROCEDURE eliminargastos
(
 @g_idgastos integer
)
as
begin
delete  FROM gastos 
 WHERE idgastos=@g_idgastos;

END;
GO*/

-----pruebas ---

/*
SELECT i.producto,c.categoria,u.unidad,i.stock, i.preciocompra, i.precioventa,convert(date,i.fecha)Fecha,

CASE WHEN  convert (varchar,convert(date,i.fechaVencimiento)) IS NULL THEN 'Sin fecha' 
ELSE convert (varchar,i.fechaVencimiento) END FechaVencimiento,
case
 when ((DATEADD(MONTH,-1,i.fechaVencimiento) < i.fechaVencimiento) AND (i.fechaVencimiento <= GETDATE())) THEN 'Vencido' 

 when ((getdate()<i.fechaVencimiento) AND(i.fechaVencimiento >DATEADD(MONTH,+1,GETDATE())))  THEN 'Estable'
 when ((DATEADD(MONTH,-1,i.fechaVencimiento) <= i.fechaVencimiento) AND(i.fechaVencimiento > GETDATE()))THEN 'Por vencer'
	
ELSE 'Sin fecha'
 END AS vencimiento
 FROM inventario i
INNER JOIN categoria c on i.idCategoria=c.idCategoria
INNER JOIN unidadMedida u on i.idUnidadMedida=u.idUnidadMedida*/

IF OBJECT_ID ('dbo.reporteVenta') IS NOT NULL  
   DROP VIEW reporteVenta;  
GO

CREATE VIEW reporteVenta
as
SELECT v.idventas,v.nombre_cliente,u.apellido as vENDedor, i.producto, dv.cantidad,(dv.cantidad*i.precioventa)Total,
 v.subtotal as subTotalGeneral, v.igv as igvGeneral,v.total as TotalGeneral,convert(date,v.fecha_Venta)FechaVenta,convert(time(0),v.fecha_Venta)horaVenta FROM ventas v
INNER JOIN usuario u on v.idusuario=u.idusuario
INNER JOIN detalle_venta dv on v.idventas=dv.idventas
INNER JOIN inventario i on dv.idinventario=i.idinventario
GO

IF OBJECT_ID ('dbo.reporteVentas') IS NOT NULL  
   DROP PROCEDURE reporteVentas;  
GO

CREATE PROCEDURE reporteVentas(@r_nVenta varchar(5), @r_fechaInicio varchar(14),@r_fechaFin varchar(14))
AS
BEGIN
IF(@r_nVenta ='' AND @r_fechaInicio='' AND @r_fechaFin='')
SELECT * FROM reporteVenta
ELSE IF(@r_fechaInicio='' AND @r_fechaFin='')
SELECT * FROM reporteVenta
WHERE idventas =@r_nVenta
ELSE IF(@r_nVenta ='')
SELECT * FROM reporteVenta
WHERE convert(date,FechaVenta)BETWEEN @r_fechaInicio AND @r_fechaFin
ELSE 
SELECT * FROM reporteVenta
WHERE idventas = @r_nVenta AND convert(date,FechaVenta)BETWEEN @r_fechaInicio AND @r_fechaFin
END
GO

----exec reporteVentas '1','2019-06-07','2019-06-09'
IF OBJECT_ID ('dbo.reporteXinventario') IS NOT NULL  
   DROP VIEW reporteXinventario;  
GO
CREATE VIEW reporteXinventario
as
SELECT i.producto,c.categoria,u.unidad, dv.cantidad,((dv.cantidad*i.precioventa)*0.18)Igv,
((dv.cantidad*i.precioventa)-((dv.cantidad*i.precioventa)*0.18))subTotal,(dv.cantidad*i.precioventa)Total FROM  detalle_venta dv
INNER JOIN inventario i on dv.idinventario=i.idinventario
INNER JOIN categoria c on i.idCategoria=c.idCategoria
INNER JOIN unidadMedida u on i.idUnidadMedida = u.idUnidadMedida
GO
IF OBJECT_ID ('dbo.reporteXproducto') IS NOT NULL  
   DROP PROCEDURE reporteXproducto;  
GO

CREATE PROCEDURE reporteXproducto(@rp_produc varchar(15))
as
begin
SELECT * FROM reporteXinventario WHERE producto LIKE @rp_produc+'%'
END
go

exec reporteXproducto ''
*/


---REPORTE FACTURA
IF OBJECT_ID ('dbo.reporteFactura') IS NOT NULL  
   DROP PROCEDURE reporteFactura;  
GO

CREATE PROCEDURE reporteFactura(@f_numeroF varchar(5), @f_fechaInicio varchar(12), @f_fechaFin varchar(12))
AS
BEGIN

if(@f_numeroF ='' and @f_fechaInicio='' and  @f_fechaFin='')

select f.idFactura, c.nombreComercial, u.apellido ,
i.producto, df.cantidad, (df.cantidad*i.precioventa)totalProduc, 
f.subtotal, f.igv,f.total,convert(date,f.fecha_factura)Fecha,convert(time(0),f.fecha_factura)hora
  from factura f
inner join usuario u on f.idusuario=u.idusuario
inner join detalle_factura df on f.idFactura=df.idFactura
inner join inventario i on df.idinventario=i.idinventario
inner join cliente c on f.idCliente= c.idCliente

else if( @f_fechaInicio='' and  @f_fechaFin='')

select f.idFactura, c.nombreComercial, u.apellido ,
i.producto, df.cantidad, (df.cantidad*i.precioventa)totalProduc, 
f.subtotal, f.igv,f.total,convert(date,f.fecha_factura)Fecha,convert(time(0),f.fecha_factura)hora
  from factura f
inner join usuario u on f.idusuario=u.idusuario
inner join detalle_factura df on f.idFactura=df.idFactura
inner join inventario i on df.idinventario=i.idinventario
inner join cliente c on f.idCliente= c.idCliente
where f.idFactura =@f_numeroF

else if(@f_numeroF='')
select f.idFactura, c.nombreComercial, u.apellido ,
i.producto, df.cantidad, (df.cantidad*i.precioventa)totalProduc, 
f.subtotal, f.igv,f.total,convert(date,f.fecha_factura)Fecha,convert(time(0),f.fecha_factura)hora
  from factura f
inner join usuario u on f.idusuario=u.idusuario
inner join detalle_factura df on f.idFactura=df.idFactura
inner join inventario i on df.idinventario=i.idinventario
inner join cliente c on f.idCliente= c.idCliente
where convert(date,f.fecha_factura)BETWEEN @f_fechaInicio AND @f_fechaFin

else
select f.idFactura, c.nombreComercial, u.apellido ,
i.producto, df.cantidad, (df.cantidad*i.precioventa)totalProduc, 
f.subtotal, f.igv,f.total,convert(date,f.fecha_factura)Fecha,convert(time(0),f.fecha_factura)hora
  from factura f
inner join usuario u on f.idusuario=u.idusuario
inner join detalle_factura df on f.idFactura=df.idFactura
inner join inventario i on df.idinventario=i.idinventario
inner join cliente c on f.idCliente= c.idCliente
where f.idFactura=@f_numeroF AND  convert(date,f.fecha_factura)BETWEEN @f_fechaInicio AND @f_fechaFin

END
GO
----REPORTE BOLETA---

IF OBJECT_ID ('dbo.vistareporteBoleta') IS NOT NULL  
   DROP VIEW vistareporteBoleta;  
GO
CREATE VIEW vistareporteBoleta
as
SELECT b.idboleta,b.nombre_cliente,u.apellido as vendedor, i.producto, dv.cantidad,(dv.cantidad*i.precioventa)Total,
 b.subtotal as subTotalGeneral, b.igv as igvGeneral,b.total as TotalGeneral,convert(date,b.fecha_Venta)FechaVenta,
 convert(time(0),b.fecha_Venta)horaVenta FROM boleta b
INNER JOIN usuario u on b.idusuario=u.idusuario
INNER JOIN detalle_boleta dv on b.idboleta=dv.idboleta
INNER JOIN inventario i on dv.idinventario=i.idinventario
GO

IF OBJECT_ID ('dbo.reporteBoleta') IS NOT NULL  
   DROP PROCEDURE reporteBoleta;  
GO

CREATE PROCEDURE reporteBoleta(@r_nVenta varchar(5), @r_fechaInicio varchar(14),@r_fechaFin varchar(14))
AS
BEGIN

IF(@r_nVenta ='' AND @r_fechaInicio='' AND @r_fechaFin='')

	SELECT * FROM vistareporteBoleta

ELSE IF(@r_fechaInicio='' AND @r_fechaFin='')

	SELECT * FROM vistareporteBoleta
	WHERE idboleta =@r_nVenta

ELSE IF(@r_nVenta ='')

	SELECT * FROM vistareporteBoleta
	WHERE convert(date,FechaVenta)BETWEEN @r_fechaInicio AND @r_fechaFin

ELSE 

	SELECT * FROM vistareporteBoleta
	WHERE idboleta = @r_nVenta AND convert(date,FechaVenta)BETWEEN @r_fechaInicio AND @r_fechaFin
END
GO


---REPORTE POR PRPODUCTO----

exec reporteFactura '','',''
exec reporteBoleta '','',''
select * from cliente